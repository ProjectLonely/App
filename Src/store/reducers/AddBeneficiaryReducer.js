const initialState = {
  planId: '',
  relationShipId: 'Self',
  name: '',
  timeZone: 'Central Daylight Time Chicago (GMT-5)',
  age: '',
  genderId: 'Men',
  phoneNumber: '',
  aboutPerson: '',
  selectedSeekOption: [],
  comment: '',
  newArray: [],
  base64:
    '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',
  sourceURL: '',
  planAmount: '',
};
export default function (state = initialState, action) {
  switch (action.type) {
    case 'addBeneficiary':
      return {...state, ...action.payload};
    case 'completeBeneficiary':
      return {...initialState, newArray: []};
    default:
      return state;
  }
}
